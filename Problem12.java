/*
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1+2+3+4+5+6+7=20. The first 10 terms would be:
 * 1,3,6,10,15,21,28,36,45,55,...
 * 
 * Let us list the factors of the first seven triangle numbers:
 *  1: 1
 *  3: 1,3
 *  6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors
 * 
 * What is the value of the first triangle number to have over five hundred divisors?
 */

 //NEEDS OPTIMIZATION
import java.util.ArrayList;
import java.util.Arrays;
public class Problem12 {
    public static void main(String[] args){
        int max_length = 0;
        int y = 0;
        
        while(max_length < 500){
            y++;
            int triangleNumber = findTriangleNumbers(y);
            int divisorsCount = findDevisors(triangleNumber);
            
            if (divisorsCount > max_length){
                max_length = divisorsCount;
                System.out.println(triangleNumber + " with " + max_length + " divisors.");
            }
        }
    }
    public static int findDevisors(int num){//Adds the individual devisors to an arraylist
        ArrayList<Integer> devisors = new ArrayList<>(Arrays.asList(1));

        for (int x=1;x<=(num);x++){
            if (num%x==0){
                int dev = num/x;
                if (devisors.contains(dev)== false){
                    devisors.add(dev);
                }
            }
        }
        System.out.println(devisors);
        return devisors.size();
    }
    public static int findTriangleNumbers(int x){
        int sumNum = 0;
        for (int y=1;y<x+1;y++){
            sumNum += y;
        }
        return sumNum;
    }
}
